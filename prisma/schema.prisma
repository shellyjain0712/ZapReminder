// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?   // For credentials authentication
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    reminders     Reminder[]
    
    // Collaborative features
    sharedReminders     SharedReminder[]
    sentCollaborations  Collaboration[] @relation("CollaborationSender")
    receivedCollaborations Collaboration[] @relation("CollaborationReceiver")
    
    // Friendship/Connection system
    sentConnections     UserConnection[] @relation("ConnectionSender")
    receivedConnections UserConnection[] @relation("ConnectionReceiver")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordResetToken {
    id        String   @id @default(cuid())
    email     String
    token     String   @unique
    expires   DateTime
    createdAt DateTime @default(now())

    @@index([email])
    @@index([token])
}

model Reminder {
    id          String   @id @default(cuid())
    title       String
    description String?
    dueDate     DateTime
    isCompleted Boolean  @default(false)
    priority    Priority @default(MEDIUM)
    category    String?
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Notification settings
    emailNotification Boolean @default(true)
    pushNotification  Boolean @default(true)
    reminderTime      DateTime? // When the actual reminder/task is due
    notificationTime  DateTime? // When to send advance notification email
    isSnooze          Boolean  @default(false)
    snoozeUntil       DateTime?
    
    // Collaborative features
    isShared          Boolean @default(false)
    sharedReminders   SharedReminder[]
    collaborations    Collaboration[]

    // Recurring reminder features
    isRecurring           Boolean @default(false)
    recurrenceType        RecurrenceType?
    recurrenceInterval    Int?
    preDueNotifications   Int[] @default([])

    @@index([userId])
    @@index([dueDate])
    @@index([isCompleted])
    @@index([isShared])
    @@index([isRecurring])
}

// User connections/friendships
model UserConnection {
    id           String            @id @default(cuid())
    senderId     String
    receiverId   String
    status       ConnectionStatus  @default(PENDING)
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    
    sender       User             @relation("ConnectionSender", fields: [senderId], references: [id], onDelete: Cascade)
    receiver     User             @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
    
    @@unique([senderId, receiverId])
    @@index([senderId])
    @@index([receiverId])
    @@index([status])
}

// Shared reminders with specific users
model SharedReminder {
    id           String                @id @default(cuid())
    reminderId   String
    userId       String
    role         SharedReminderRole    @default(VIEWER)
    canEdit      Boolean              @default(false)
    canComplete  Boolean              @default(false)
    createdAt    DateTime             @default(now())
    
    reminder     Reminder             @relation(fields: [reminderId], references: [id], onDelete: Cascade)
    user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([reminderId, userId])
    @@index([reminderId])
    @@index([userId])
    @@index([role])
}

enum RecurrenceType {
    DAILY
    WEEKLY
    MONTHLY
    CUSTOM
}
// Collaboration invitations and assignments
model Collaboration {
    id           String               @id @default(cuid())
    reminderId   String
    senderId     String
    receiverId   String
    type         CollaborationType    @default(SHARE)
    status       CollaborationStatus  @default(PENDING)
    role         SharedReminderRole   @default(VIEWER)
    message      String?
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt
    
    reminder     Reminder            @relation(fields: [reminderId], references: [id], onDelete: Cascade)
    sender       User                @relation("CollaborationSender", fields: [senderId], references: [id], onDelete: Cascade)
    receiver     User                @relation("CollaborationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
    
    @@index([reminderId])
    @@index([senderId])
    @@index([receiverId])
    @@index([status])
    @@index([type])
}

enum ConnectionStatus {
    PENDING
    ACCEPTED
    BLOCKED
}

enum SharedReminderRole {
    VIEWER      // Can view only
    EDITOR      // Can edit reminder
    ASSIGNEE    // Responsible for completing the reminder
    MANAGER     // Can manage sharing and permissions
}

enum CollaborationType {
    SHARE       // Share a reminder for viewing/editing
    ASSIGN      // Assign responsibility for completion
    TRANSFER    // Transfer ownership
}

enum CollaborationStatus {
    PENDING
    ACCEPTED
    DECLINED
    CANCELLED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}
